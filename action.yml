name: "GuardAI Action"
description: "A GitHub Action for running GuardAI in GitHub Workflows"
author: "Best Olunusi"
branding:
  icon: "box"
  color: "white"

inputs:
  version:
    description: "Version of GuardAI to install"
    required: false
    default: "latest"
  provider:
    description: "AI provider"
    required: true
  model:
    description: "AI model to use"
    required: false
  directory:
    description: "Directory to scan"
    required: false
    default: "."
  changes_only:
    description: "Scan only changed files"
    required: false
    default: "false"
  repo:
    description: "GitHub repository"
    required: false
  pr_number:
    description: "Pull request number"
    required: false
  github_token:
    description: "GitHub API token"
    required: false
  host:
    description: "Custom AI server host"
    required: false
  port:
    description: "Custom AI server port"
    required: false
  token:
    description: "Token for authenticating with the custom AI server"
    required: false
  endpoint:
    description: "API endpoint for the custom server"
    required: false
    default: "/api/v1/scan"
  output_file:
    description: "Optional output file to store GuardAI results"
    required: false

runs:
  using: "composite"
  steps:
    - name: Install guardai
      uses: codeguardai/setup-guardai-action@v0.1.0
      with:
        version: ${{ inputs.version }}

    - name: Run guardai
      shell: bash
      run: |
        guardai_command="guardai"

        # Conditionally add each flag
        [ -n "${{ inputs.provider }}" ] && guardai_command="$guardai_command --provider ${{ inputs.provider }}"
        [ -n "${{ inputs.directory }}" ] && guardai_command="$guardai_command --directory ${{ inputs.directory }}"
        [ -n "${{ inputs.model }}" ] && guardai_command="$guardai_command --model ${{ inputs.model }}"
        [ "${{ inputs.changes_only }}" == "true" ] && guardai_command="$guardai_command --changes_only"
        [ -n "${{ inputs.repo }}" ] && guardai_command="$guardai_command --repo ${{ inputs.repo }}"
        [ -n "${{ inputs.pr_number }}" ] && guardai_command="$guardai_command --pr_number ${{ inputs.pr_number }}"
        [ -n "${{ inputs.github_token }}" ] && guardai_command="$guardai_command --github_token ${{ inputs.github_token }}"
        [ -n "${{ inputs.host }}" ] && guardai_command="$guardai_command --host ${{ inputs.host }}"
        [ -n "${{ inputs.port }}" ] && guardai_command="$guardai_command --port ${{ inputs.port }}"
        [ -n "${{ inputs.token }}" ] && guardai_command="$guardai_command --token ${{ inputs.token }}"
        [ -n "${{ inputs.endpoint }}" ] && guardai_command="$guardai_command --endpoint ${{ inputs.endpoint }}"

        # Determine if an output file was specified
        if [ -n "${{ inputs.output_file }}" ]; then
          # Write to the specified file
          $guardai_command 1> "${{ inputs.output_file }}"
        else
          # Write to the console
          $guardai_command
        fi
